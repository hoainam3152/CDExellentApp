// <auto-generated />
using System;
using CDExellentAPI.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CDExellentAPI.Migrations
{
    [DbContext(typeof(ManagementDbContext))]
    [Migration("20241226024158_Add_Manage_SurveyRequest_Notification")]
    partial class Add_Manage_SurveyRequest_Notification
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CDExellentAPI.Entities.Answer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Area", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Blog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreatorId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Delegation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("Deligation");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Distributor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SalesId")
                        .HasColumnType("int");

                    b.Property<int>("SalesManagementId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AreaId");

                    b.HasIndex("SalesManagementId");

                    b.ToTable("Distributor");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Guest", b =>
                {
                    b.Property<int>("VisitPlanId")
                        .HasColumnType("int");

                    b.Property<int>("GuestUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitPlanId", "GuestUserId");

                    b.HasIndex("GuestUserId");

                    b.ToTable("Guest");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Media", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Module", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreatorId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("ModuleId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.PlanStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("PlanStatus");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Question", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsMultiSelect")
                        .HasColumnType("bit");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SurveyId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Receive", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSeen")
                        .HasColumnType("bit");

                    b.HasKey("NotificationId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Receives");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Survey", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("SurveyID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SurveyID");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.SurveyAssignee", b =>
                {
                    b.Property<int>("SurveyRequestId")
                        .HasColumnType("int");

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFinished")
                        .HasColumnType("bit");

                    b.HasKey("SurveyRequestId", "AssigneeId");

                    b.HasIndex("AssigneeId");

                    b.ToTable("SurveyAssignee");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.SurveyRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyRequest");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Task", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("AssigneeFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanUserId")
                        .HasColumnType("int");

                    b.Property<string>("ReporterFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ReporterId")
                        .HasColumnType("int");

                    b.Property<int>("RepoterId")
                        .HasColumnType("int");

                    b.Property<int?>("StarRate")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VisitPlanId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("PlanUserId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("VisitPlanId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.TaskStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("TaskStatus");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Title", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.TypeDate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("TypeDate");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AreaId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TitleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.VisitPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PlanUserId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TypeDateId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DistributorId");

                    b.HasIndex("PlanStatusId");

                    b.HasIndex("PlanUserId");

                    b.HasIndex("TypeDateId");

                    b.ToTable("VisitPlan");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Answer", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Blog", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.User", "Creator")
                        .WithMany("Blogs")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Delegation", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.Permission", "Permission")
                        .WithMany("Delegations")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.User", "User")
                        .WithMany("Delegations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Distributor", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.Area", "Area")
                        .WithMany("Distributors")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.User", "SalesManagement")
                        .WithMany("Distributors")
                        .HasForeignKey("SalesManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("SalesManagement");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Guest", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.User", "GuestUser")
                        .WithMany("Guests")
                        .HasForeignKey("GuestUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.VisitPlan", "VisitPlan")
                        .WithMany("Guests")
                        .HasForeignKey("VisitPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GuestUser");

                    b.Navigation("VisitPlan");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Media", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.User", "User")
                        .WithMany("Medias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Notification", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.User", "Creator")
                        .WithMany("Notifications")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Permission", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Question", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Receive", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.Notification", "Notification")
                        .WithMany("Receives")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.User", "Receiver")
                        .WithMany("Receives")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Survey", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.User", "Creator")
                        .WithMany("Surveys")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.Survey", null)
                        .WithMany("Surveys")
                        .HasForeignKey("SurveyID");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.SurveyAssignee", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.User", "Assignee")
                        .WithMany("SurveyAssignees")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.SurveyRequest", "SurveyRequest")
                        .WithMany("SurveyAssignees")
                        .HasForeignKey("SurveyRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("SurveyRequest");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.SurveyRequest", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Task", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.User", "Assignee")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.User", "PlanUser")
                        .WithMany("PlannedTasks")
                        .HasForeignKey("PlanUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.User", "Reporter")
                        .WithMany("ReportedTasks")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.TaskStatus", "TaskStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.VisitPlan", "VisitPlan")
                        .WithMany("Tasks")
                        .HasForeignKey("VisitPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("PlanUser");

                    b.Navigation("Reporter");

                    b.Navigation("TaskStatus");

                    b.Navigation("VisitPlan");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Title", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.Category", "Category")
                        .WithMany("Titles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.User", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.Area", "Area")
                        .WithMany("Users")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.User", "Manager")
                        .WithMany("Managers")
                        .HasForeignKey("ManagerId");

                    b.HasOne("CDExellentAPI.Entities.Title", "Title")
                        .WithMany("Users")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Manager");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.VisitPlan", b =>
                {
                    b.HasOne("CDExellentAPI.Entities.Distributor", "Distributor")
                        .WithMany("VisitPlans")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.PlanStatus", "PlanStatus")
                        .WithMany("VisitPlans")
                        .HasForeignKey("PlanStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.User", "PlanUser")
                        .WithMany("VisitPlans")
                        .HasForeignKey("PlanUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CDExellentAPI.Entities.TypeDate", "TypeDate")
                        .WithMany("Plans")
                        .HasForeignKey("TypeDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Distributor");

                    b.Navigation("PlanStatus");

                    b.Navigation("PlanUser");

                    b.Navigation("TypeDate");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Area", b =>
                {
                    b.Navigation("Distributors");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Category", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Distributor", b =>
                {
                    b.Navigation("VisitPlans");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Module", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Notification", b =>
                {
                    b.Navigation("Receives");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Permission", b =>
                {
                    b.Navigation("Delegations");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.PlanStatus", b =>
                {
                    b.Navigation("VisitPlans");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Survey", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.SurveyRequest", b =>
                {
                    b.Navigation("SurveyAssignees");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.TaskStatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.Title", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.TypeDate", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("Blogs");

                    b.Navigation("Delegations");

                    b.Navigation("Distributors");

                    b.Navigation("Guests");

                    b.Navigation("Managers");

                    b.Navigation("Medias");

                    b.Navigation("Notifications");

                    b.Navigation("PlannedTasks");

                    b.Navigation("Receives");

                    b.Navigation("ReportedTasks");

                    b.Navigation("SurveyAssignees");

                    b.Navigation("Surveys");

                    b.Navigation("VisitPlans");
                });

            modelBuilder.Entity("CDExellentAPI.Entities.VisitPlan", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
